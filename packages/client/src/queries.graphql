# Get all pools
query GetAllPools($limit: Int, $originsLimit: Int, $where: relayPoolFilter) {
  relayPools(limit: $limit, where: $where) {
    items {
      apy
      asset
      chainId
      contractAddress
      createdAt
      createdAtBlock
      curator {
        cancellers
        chainId
        contractAddress
        executors
        proposers
      }
      decimals
      name
      origins(limit: $originsLimit) {
        totalCount
        items {
          bridgeFee
          chainId
          coolDown
          curator
          currentOutstandingDebt
          maxDebt
          originBridge
          originChainId
          proxyBridge
        }
      }
      outstandingDebt
      symbol
      totalAssets
      totalBridgeFees
      totalShares
      yieldPool
    }
  }
}

# Get all yield pools
query GetAllYieldPools($limit: Int, $where: yieldPoolFilter) {
  yieldPools(limit: $limit, where: $where) {
    items {
      apy
      asset
      chainId
      contractAddress
      lastUpdated
      name
    }
  }
}

# Get all pools with snapshots
query GetAllPoolsWithSnapshots(
  $limit: Int
  $originsLimit: Int
  $snapshotsLimit: Int
  $targetTimestamp: BigInt!
  $orderDirection: String!
  $where: relayPoolFilter
) {
  relayPools(limit: $limit, where: $where) {
    items {
      apy
      asset
      chainId
      contractAddress
      createdAt
      createdAtBlock
      curator {
        cancellers
        chainId
        contractAddress
        executors
        proposers
      }
      decimals
      name
      origins(limit: $originsLimit) {
        totalCount
        items {
          bridgeFee
          chainId
          coolDown
          curator
          currentOutstandingDebt
          maxDebt
          originBridge
          originChainId
          proxyBridge
        }
      }
      outstandingDebt
      snapshots(
        limit: $snapshotsLimit
        where: { timestamp_lte: $targetTimestamp }
        orderBy: "blockNumber"
        orderDirection: $orderDirection
      ) {
        items {
          blockNumber
          chainId
          sharePrice
          timestamp
          vault
          yieldPool
          yieldPoolSharePrice
        }
      }
      symbol
      totalAssets
      totalBridgeFees
      totalShares
      yieldPool
    }
  }
}

# Get a specific pool
query GetRelayPool($contractAddress: String!, $chainId: Float!) {
  relayPool(contractAddress: $contractAddress, chainId: $chainId) {
    apy
    asset
    chainId
    contractAddress
    createdAt
    createdAtBlock
    decimals
    name
    outstandingDebt
    symbol
    totalAssets
    totalBridgeFees
    totalShares
    yieldPool
  }
}

# Get all bridge transactions by status
query GetAllBridgeTransactionsByType(
  $nativeBridgeStatus: String!
  $limit: Int
) {
  bridgeTransactions(
    where: { nativeBridgeStatus: $nativeBridgeStatus }
    limit: $limit
  ) {
    items {
      amount
      arbTransactionIndex
      asset
      destinationPoolAddress
      destinationPoolChainId
      destinationRecipient
      expectedFinalizationTimestamp
      finalizationTimestamp
      hyperlaneMessageId
      loanEmittedTxHash
      nativeBridgeFinalizedTxHash
      nativeBridgeStatus
      nonce
      opProofTxHash
      opWithdrawalHash
      originBridgeAddress
      originChainId
      originSender
      originTimestamp
      originTxHash
      zksyncWithdrawalHash
    }
  }
}

# Get detailed pool information with snapshots at a specific time
query GetPoolDetails(
  $poolAddress: String!
  $chainId: Float!
  $originsLimit: Int
  $snapshotsLimit: Int
  $targetTimestamp: BigInt!
  $orderDirection: String!
) {
  relayPool(contractAddress: $poolAddress, chainId: $chainId) {
    apy
    asset
    chainId
    contractAddress
    createdAt
    createdAtBlock
    decimals
    name
    origins(limit: $originsLimit) {
      totalCount
      items {
        bridgeFee
        chainId
        coolDown
        curator
        currentOutstandingDebt
        maxDebt
        originBridge
        originChainId
        proxyBridge
      }
    }
    outstandingDebt
    snapshots(
      limit: $snapshotsLimit
      where: { timestamp_lte: $targetTimestamp }
      orderBy: "blockNumber"
      orderDirection: $orderDirection
    ) {
      items {
        blockNumber
        chainId
        sharePrice
        timestamp
        vault
        yieldPool
        yieldPoolSharePrice
      }
    }
    symbol
    totalAssets
    totalBridgeFees
    totalShares
    yieldPool
  }
}

# Get yield pool information
query GetYieldPool($yieldPoolAddress: String!, $chainId: Float!) {
  yieldPool(contractAddress: $yieldPoolAddress, chainId: $chainId) {
    apy
    asset
    chainId
    contractAddress
    lastUpdated
    name
  }
}

# Get transaction volume for a pool since a specific timestamp
query GetVolume($poolAddress: String!, $fromTimestamp: BigInt!, $limit: Int) {
  bridgeTransactions(
    where: {
      destinationPoolAddress: $poolAddress
      originTimestamp_gt: $fromTimestamp
    }
    limit: $limit
  ) {
    items {
      amount
    }
  }
}

# Get user balances with detailed pool information
query GetUserBalances($walletAddress: String!, $limit: Int) {
  userBalances(where: { wallet: $walletAddress }, limit: $limit) {
    items {
      relayPool
      shareBalance
      totalDeposited
      totalWithdrawn
      pool {
        apy
        asset
        chainId
        contractAddress
        createdAt
        createdAtBlock
        decimals
        name
        outstandingDebt
        symbol
        totalAssets
        totalBridgeFees
        totalShares
        yieldPool
      }
    }
  }
}

# Get user balance in a specific pool
query GetUserBalanceForPool(
  $walletAddress: String!
  $poolAddress: String!
  $limit: Int
) {
  userBalances(
    where: { AND: [{ wallet: $walletAddress }, { relayPool: $poolAddress }] }
    limit: $limit
  ) {
    items {
      shareBalance
      totalDeposited
      totalWithdrawn
      pool {
        apy
        asset
        chainId
        contractAddress
        createdAt
        createdAtBlock
        decimals
        name
        outstandingDebt
        symbol
        totalAssets
        totalBridgeFees
        totalShares
        yieldPool
      }
    }
  }
}

# Get bridge transactions for a specific pool
query GetPoolBridgeTransactions(
  $poolAddress: String!
  $poolChainId: Int!
  $limit: Int
  $orderBy: String
  $orderDirection: String
  $after: String
  $before: String
) {
  bridgeTransactions(
    where: {
      destinationPoolAddress: $poolAddress
      destinationPoolChainId: $poolChainId
    }
    limit: $limit
    orderBy: $orderBy
    orderDirection: $orderDirection
    after: $after
    before: $before
  ) {
    items {
      amount
      asset
      destinationPoolAddress
      destinationPoolChainId
      destinationRecipient
      expectedFinalizationTimestamp
      finalizationTimestamp
      hyperlaneMessageId
      loanEmittedTxHash
      nativeBridgeFinalizedTxHash
      nativeBridgeStatus
      nonce
      originBridgeAddress
      originChainId
      originSender
      originTimestamp
      originTxHash
      origin {
        originChainId
        originBridge
        proxyBridge
      }
    }
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
  }
}

# Get bridge transactions for multiple pools
query GetAllPoolsBridgeTransactions(
  $poolAddresses: [String]
  $poolChainIds: [Int]
  $limit: Int
  $orderBy: String
  $orderDirection: String
  $after: String
  $before: String
) {
  bridgeTransactions(
    where: {
      destinationPoolAddress_in: $poolAddresses
      destinationPoolChainId_in: $poolChainIds
    }
    limit: $limit
    orderBy: $orderBy
    orderDirection: $orderDirection
    after: $after
    before: $before
  ) {
    items {
      amount
      asset
      destinationPoolAddress
      destinationPoolChainId
      destinationRecipient
      expectedFinalizationTimestamp
      finalizationTimestamp
      hyperlaneMessageId
      loanEmittedTxHash
      nativeBridgeFinalizedTxHash
      nativeBridgeStatus
      nonce
      originBridgeAddress
      originChainId
      originSender
      originTimestamp
      originTxHash
      origin {
        originChainId
        originBridge
        proxyBridge
      }
    }
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
  }
}

# Get bridge address for a specific origin
query GetOriginBridge(
  $poolChainId: Int!
  $poolAddress: String!
  $originChainId: Int!
  $limit: Int = 1
) {
  poolOrigins(
    where: {
      AND: [
        { chainId: $poolChainId }
        { pool: $poolAddress }
        { originChainId: $originChainId }
        { maxDebt_gt: "0" }
      ]
    }
    limit: $limit
  ) {
    items {
      originBridge
      proxyBridge
      originChainId
      bridgeFee
      coolDown
      curator
      currentOutstandingDebt
      maxDebt
      chainId
    }
  }
}
